{"version":3,"sources":["../src/match/sentence.ts"],"names":[],"mappings":"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","file":"match/sentence.js","sourcesContent":["/**\n * @file sentence\n * @module jfseb.fdevstart.sentence\n * @copyright (c) Gerd Forstmann\n *\n * Match a tool record on a sentence,\n *\n * This will unify matching required and optional category words\n * with the requirements of the tool.\n *\n */\n\n// <reference path=\"../../lib/node-4.d.ts\" />\n\nimport * as debug from 'debug';\n\n// import * as utils from '../utils/utils';\n\nimport * as IMatch from './iferbase';\n\nconst debuglog = debug('sentence')\n\nexport function findWordByCategory(oSentence, sCategory : string) : { word : IMatch.IWord, index : number} {\n  \tvar res = {} as { word : IMatch.IWord, index : number};\n    oSentence.every(function(oWord, iIndex) {\n      if(oWord.category === sCategory) {\n        res = { word: oWord,\n                index : iIndex };\n        return false;\n      }\n      return true;\n    })\n    return res;\n}\n\nexport function getDistinctCategoriesInSentence(oSentence : IMatch.ISentence) : string[] {\n  var res = [];\n  var resm = {};\n  oSentence.forEach(function(oWord) {\n    if(oWord.category === \"category\") {\n      if(!resm[oWord.matchedString]) {\n        res.push(oWord.matchedString);\n        resm[oWord.matchedString] = 1;\n      }\n    }\n  });\n  return res;\n}\n\nexport function rankingGeometricMean(oSentence : IMatch.ISentence) : number {\n  const length = oSentence.length;\n  if(length === 0) {\n    return 1.0;\n  }\n  var prod =  oSentence.reduce(function(prev, oWord) {\n    return prev * (oWord._ranking || 1.0);\n  },1.0);\n  // TODO: find somethign faster ;-)\n  return Math.pow(prod, 1/length);\n}\n\nexport function rankingProduct(oSentence: IMatch.ISentence) : number {\n  return rankingGeometricMean(oSentence);\n}\n\nexport function cmpRankingProduct(a : IMatch.ISentence, b : IMatch.ISentence) {\n  return - (rankingProduct(a) - rankingProduct(b));\n}\n\nexport function cutoffSentenceAtRatio(sentences : IMatch.ISentence[]) {\n  if(sentences.length === 0){\n    return sentences;\n  }\n  var bestRank = rankingProduct(sentences[0]);\n  for(var i = 1; (i < Math.min(sentences.length, 300)) && ((rankingProduct(sentences[i])/ bestRank) > 0.8); ++ i) {\n    // empty\n  }\n  debuglog(\"reduce sentences by \" + i + \"/\" + sentences.length);\n  return sentences.slice(0,i);\n}\n\n/*\nexport function simplifySentence(res : IMatch.ICategorizedStringRanged[][]) : string[][] {\n  return res.map(function (r) {\n    return r.map(word => { return word.string + '=>' + word.matchedString + '/' + word.category + (word.span ? '/' + word.span : '') })\n  });\n}\n*/\n\nexport function dumpNice(sentence : IMatch.ISentence, fn?: any) : string {\n  var result = [];\n    sentence.forEach(function(oWord, index) {\n      var sWord = `[${index}] : ${(oWord._ranking || 0).toFixed(3)} ${oWord.category} \"${oWord.string}\" => \"${oWord.matchedString}\"`\n      result.push(sWord + \"\\n\");\n    })\n    result.push(\".\\n\");\n    return result.join(\"\");\n}\n\nexport function dumpNiceRuled(sentence : IMatch.ISentence, fn?: any) : string {\n  var result = [];\n    sentence.forEach(function(oWord, index) {\n      var sWord = `[${index}] : ${(oWord._ranking || 0).toFixed(3)} ${oWord.category} \"${oWord.string}\" => \"${oWord.matchedString}\" `\n      result.push(sWord + \"\\n\");\n    })\n    result.push(\".\\n\");\n    return result.join(\"\");\n}\n\n\nexport function dumpNiceBitIndexed(sentence : IMatch.ISentence, fn?: any) : string {\n  var result = [];\n    sentence.forEach(function(word, index) {\n      var sWord = `[${index}] : ${(word._ranking || 0).toFixed(3)} \"${word.string}\" => \"${word.matchedString}\" `\n      + word.category + ((word as any).span? '/' + (word as any).span : '') + ` ${word.rule.wordType}${word.rule.bitindex}`;\n      result.push(sWord + \"\\n\");\n    })\n    result.push(\".\\n\");\n    return result.join(\"\");\n}\n\n\nexport function dumpNiceArr(sentences : IMatch.ISentence[], fn? : any) : string {\n  if(!sentences) {\n    return \"\";\n  }\n  var res = sentences.reduce(function(prev, oSentence) {\n    return prev + dumpNice(oSentence);\n  }, \"\")\n  return res;\n}\n\nexport function simplifyStringsWithBitIndex(sentence : IMatch.ISentence) {\n  if(!sentence) {\n    return [];\n  }\n  return sentence.map(word =>  { return word.string + '=>' +  word.matchedString + '/' + word.category + ((word as any).span? '/' + (word as any).span : '') + ` ${word.rule.wordType}${word.rule.bitindex}`})\n}\n"],"sourceRoot":"/source/"}